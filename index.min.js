function utilites() {
  let e = () => {
      let e = { sum: 0 };
      return function (t = 0) {
        return (e.sum += t), e.sum;
      };
    },
    t = (e, t, n) => {
      let a = window.matchMedia(e),
        { EVENT: o } = constants();
      a.matches ? t.from() : t.to();
      let r = () => {
        a.matches ? n.from() : n.to();
      };
      return (
        a.addEventListener(o.change, r),
        () => a.removeEventListener(o.change, r)
      );
    };
  return {
    memoStore: e,
    getHTMLElementBoxHeight: (e) => e.getBoundingClientRect().height,
    responsive: t,
  };
}
function constants() {
  let e = window.getComputedStyle(document.body),
    t = {
      0: e.getPropertyValue("--blue"),
      1: e.getPropertyValue("--orange"),
      2: e.getPropertyValue("--green"),
      3: e.getPropertyValue("--purple"),
    };
  return {
    EVENT: {
      click: "click",
      keydown: "keydown",
      scroll: "scroll",
      change: "change",
    },
    CLASSNAME: {
      navLinkActive: "nav-link-active",
      hidden: "hidden",
      burgerFocus: "nav-burger-focus",
      burgerLineAnimation: "burger-line-animation",
      burgerLineAnimation1: "burger-line-animation-1",
      animationFadeOut: "animation-fade-out",
      animationFadeIn: "animation-fade-in",
    },
    COLOR: t,
    ATTR: {
      inert: "inert",
      airaExpanded: "aria-expanded",
      dataScrollFix: "data-scroll-fix",
      dataArrow: "data-arrow",
      dataBoxArrow: "data-box-arrow",
      dataGlowingColumnArrowDown: "data-glowing-column-arrow",
      dataGlowingRowArrowLeft: "data-glowing-row-arrow-left",
      dataGlowingRowArrowRight: "data-glowing-row-arrow-right",
      dataHomeAnimation: "data-home-animation",
      dataNavLink: "data-nav-link",
    },
    HTML_POSITION: { afterBegin: "afterbegin" },
    SCREEN_SIZE: {
      mobileToDesktop: "(width < 48em)",
      desktopToLargeDeskTop: "(width < 90em)",
    },
    ID: { submit: "submit", menu: "menu", burger: "burger", nav: "nav" },
  };
}
function ShootingStarAnimation() {
  let { COLOR: e, ATTR: t } = constants(),
    n = (t) => {
      if (t < 0 || t > Object.keys(e).length - 1)
        throw `number not in object. range [0-${Object.keys(e).length - 1}]`;
      return e[null == t ? Math.floor(4 * Math.random()).toString() : t];
    },
    a = () => Math.floor(10 * Math.random() + 5).toString(),
    o = () => Math.floor(Math.random() * window.innerHeight),
    r = () => Math.floor(Math.random() * window.innerWidth),
    i = (e) => ({
      position: { value: 0, measurement: "px" },
      positionTwo: { value: 0, measurement: "px" },
      speed: { value: a(), measurement: "s" },
      delay: { value: 0, measurement: "s" },
      color: n(),
      ...e,
    }),
    s = (e) => {
      let t = i(e);
      return `<span class="arrow-random-x" style='top:${
        t.position.value + t.position.measurement
      }; bottom:${t.positionTwo.value + t.positionTwo.value};'>
        <span class="arrow-left" style=' background: linear-gradient(270deg, transparent, ${
          t.color
        }); animation: leftArrow ${
        t.speed.value + t.speed.measurement
      } linear infinite; animation-delay:${
        t.delay.value + t.delay.measurement
      };'></span>
      </span>`;
    },
    m = (e) => {
      let t = i(e);
      return `<span class="arrow-random-y" style='right:${
        t.position.value + t.position.measurement
      }; left:${t.positionTwo.value + t.positionTwo.value};'>
        <span class="arrow-down" style='background: linear-gradient(180deg, transparent, ${
          t.color
        }); animation: downArrow ${
        t.speed.value + t.speed.measurement
      } linear infinite; animation-delay:${
        t.delay.value + t.delay.measurement
      };'></span>
      </span>`;
    },
    l = (e) => {
      let t = i(e);
      return `<span class="arrow-random-x" style='top:${
        t.position.value + t.position.measurement
      }; bottom:${t.positionTwo.value + t.positionTwo.value};'>
        <span class="arrow-right" style='background: linear-gradient(90deg, transparent, ${
          t.color
        }); animation: rightArrow ${
        t.speed.value + t.speed.measurement
      } linear infinite; animation-delay:${
        t.delay.value + t.delay.measurement
      };'></span>
      </span>`;
    },
    u = (e) => {
      let t = i(e);
      return `<span class="arrow-random-y" style='right:${
        t.position.value + t.position.measurement
      }; left:${t.positionTwo.value + t.positionTwo.value};'>
        <span class="arrow-up" style='background: linear-gradient(360deg, transparent, ${
          t.color
        }); animation: upArrow ${
        t.speed.value + t.speed.measurement
      } linear infinite; animation-delay:${
        t.delay.value + t.delay.measurement
      };'></span>
      </span>`;
    };
  return {
    arrowStyleStore: i,
    getRandomX: r,
    getRandomY: o,
    getRandomSpeed: a,
    getColor: n,
    leftArrow: s,
    upArrow: u,
    rightArrow: l,
    downArrow: m,
    appendArrow: function e(a) {
      a.setAttribute(t.dataArrow, "");
      a.appendChild(document.createElement("span")).innerHTML = s({
        position: { value: 0, measurement: "px" },
        positionTwo: { value: 0, measurement: "px" },
        speed: { value: 4, measurement: "S" },
        color: n(0),
      });
    },
    removeArrow: function e(n) {
      null != n.children[0] &&
        (n.children[0].remove(), n.removeAttribute(t.dataArrow, ""));
    },
    appendBoxArrow: function e(a) {
      a.setAttribute(t.dataBoxArrow, "");
      let o = document.createElement("span"),
        r = [
          s({
            position: { value: 0, measurement: "rem" },
            positionTwo: { value: 0, measurement: "rem" },
            speed: { value: 4, measurement: "s" },
            color: n(0),
          }),
          u({
            position: { value: 0, measurement: "rem" },
            positionTwo: { value: 0, measurement: "rem" },
            speed: { value: 4, measurement: "s" },
            delay: { value: 1, measurement: "s" },
            color: n(0),
          }),
          l({
            position: { value: 0, measurement: "rem" },
            positionTwo: { value: 0, measurement: "rem" },
            speed: { value: 4, measurement: "s" },
            delay: { value: 2, measurement: "s" },
            color: n(0),
          }),
          m({
            position: { value: 0, measurement: "rem" },
            positionTwo: { value: 0, measurement: "rem" },
            speed: { value: 4, measurement: "s" },
            delay: { value: 3, measurement: "s" },
            color: n(0),
          }),
          s({
            position: { value: 0, measurement: "rem" },
            positionTwo: { value: 0, measurement: "rem" },
            speed: { value: 4, measurement: "s" },
            delay: { value: 2, measurement: "s" },
            color: n(0),
          }),
          u({
            position: { value: 0, measurement: "rem" },
            positionTwo: { value: 0, measurement: "rem" },
            speed: { value: 4, measurement: "s" },
            delay: { value: 3, measurement: "s" },
            color: n(0),
          }),
          l({
            position: { value: 0, measurement: "rem" },
            positionTwo: { value: 0, measurement: "rem" },
            speed: { value: 4, measurement: "s" },
            delay: { value: 4, measurement: "s" },
            color: n(0),
          }),
          m({
            position: { value: 0, measurement: "rem" },
            positionTwo: { value: 0, measurement: "rem" },
            speed: { value: 4, measurement: "s" },
            delay: { value: 5, measurement: "s" },
            color: n(0),
          }),
        ];
      (o.innerHTML = r.reduce((e, t) => t + e, "")), a.appendChild(o);
    },
    removeBoxArrow: function e(n) {
      null != n.children[0] &&
        (n.children[0].remove(), n.removeAttribute(t.dataBoxArrow));
    },
  };
}
function navigation() {
  let { responsive: e } = utilites(),
    { EVENT: t, CLASSNAME: n, ATTR: a, SCREEN_SIZE: o, ID: r } = constants(),
    i = document.getElementById(r.menu),
    s = Array.from(document.querySelectorAll(`#${r.burger} div`)),
    m = Array.from(document.querySelectorAll(`div[${a.dataScrollFix}]`)),
    l = document.getElementById(r.nav),
    u = Array.from(document.querySelectorAll(`a[${a.dataNavLink}]`)),
    d = !0;
  function p(e) {
    (d = !1),
      u.forEach((e) => {
        e.classList.remove(n.navLinkActive);
      }),
      e.target.classList.add(n.navLinkActive),
      setTimeout(() => {
        d = !0;
      }, 2e3);
  }
  u.forEach((e) => {
    e.addEventListener(t.click, p);
  });
  let v = e(
      o.mobileToDesktop,
      {
        from() {
          i.setAttribute(a.inert, ""), i.classList.add(n.hidden);
        },
        to() {
          i.classList.remove(n.hidden), i.removeAttribute(a.inert, "");
        },
      },
      {
        from() {
          i.setAttribute(a.inert, ""),
            i.classList.add(n.hidden),
            i.classList.add(n.animationFadeOut),
            s[0].classList.remove(n.burgerLineAnimation),
            s[1].classList.remove(n.hidden),
            s[2].classList.remove(n.burgerLineAnimation1);
        },
        to() {
          i.classList.remove(n.hidden),
            i.removeAttribute(a.inert, ""),
            i.classList.remove(n.animationFadeOut),
            i.classList.remove(n.animationFadeIn);
        },
      }
    ),
    c = ((e) => {
      let { EVENT: t } = constants(),
        n = document.getElementById(r.burger),
        a = (t) => {
          t.preventDefault(), e(), n.focus();
        };
      return (
        n.addEventListener(t.click, a), () => n.removeEventListener(t.click, a)
      );
    })(() => {
      i.classList.contains(n.hidden) && i.classList.remove(n.hidden),
        i.classList.contains(n.animationFadeIn)
          ? (i.classList.remove(n.animationFadeIn),
            i.classList.add(n.animationFadeOut))
          : (i.classList.remove(n.animationFadeOut),
            i.classList.add(n.animationFadeIn)),
        s[0].classList.toggle(n.burgerLineAnimation),
        s[1].classList.toggle(n.hidden),
        s[2].classList.toggle(n.burgerLineAnimation1),
        i.toggleAttribute(a.inert),
        i.toggleAttribute(a.airaExpanded);
    }),
    g = () => u.forEach((e) => e.removeEventListener(t.click, p)),
    w = (() => {
      let { getHTMLElementBoxHeight: e, memoStore: a } = utilites(),
        o = [0, ...m.map((t, n) => (n = e(t) - e(l) - 5))];
      function r(e) {
        if ((e.preventDefault(), !1 === d)) return;
        let t = window.scrollY,
          r = a(),
          i = a();
        for (let s = 0; s < u.length; s++) {
          let m = i(o[s]),
            l = r(o[s + 1]);
          t >= m &&
            t <= l &&
            (u[s].classList.contains(n.navLinkActive) ||
              u.map((e) => e.classList.remove(n.navLinkActive)),
            u[s].classList.add(n.navLinkActive));
        }
      }
      return (
        window.addEventListener(t.scroll, r),
        () => window.removeEventListener(t.scroll, r)
      );
    })();
  return [v, c, g, w];
}
function sectionAnimation() {
  let { SCREEN_SIZE: e, ATTR: t } = constants(),
    { responsive: n } = utilites(),
    {
      downArrow: a,
      leftArrow: o,
      rightArrow: r,
      getColor: i,
    } = ShootingStarAnimation(),
    s = document.querySelectorAll(`[${t.dataGlowingRowArrowLeft}]`),
    m = document.querySelectorAll(`[${t.dataGlowingRowArrowRight}]`),
    l = document.querySelectorAll(`[${t.dataGlowingColumnArrowDown}]`),
    u = {
      to() {
        m.forEach(
          (e) =>
            (e.innerHTML = r({
              position: { value: 1.25, measurement: "rem" },
              positionTwo: { value: 1.25, measurement: "rem" },
              speed: { value: 10, measurement: "s" },
              delay: { value: 4900, measurement: "ms" },
              color: i(0),
            }))
        ),
          l.forEach((e) => {
            e.innerHTML = a({
              position: { value: 1.25, measurement: "rem" },
              positionTwo: { value: 1.25, measurement: "rem" },
              speed: { value: 10, measurement: "s" },
              delay: { value: 2500, measurement: "ms" },
              color: i(0),
            });
          }),
          s.forEach((e) => {
            e.innerHTML = o({
              position: { value: 1.25, measurement: "rem" },
              positionTwo: { value: 1.25, measurement: "rem" },
              speed: { value: 10, measurement: "s" },
              color: i(0),
            });
          });
      },
      from() {
        m.forEach((e) => {
          e.innerHTML = r({
            position: { value: 1, measurement: "rem" },
            positionTwo: { value: 1, measurement: "rem" },
            speed: { value: 10, measurement: "s" },
            delay: { value: 4900, measurement: "ms" },
            color: i(0),
          });
        }),
          l.forEach((e) => {
            e.innerHTML = a({
              position: { value: 1, measurement: "rem" },
              positionTwo: { value: 1, measurement: "rem" },
              speed: { value: 10, measurement: "s" },
              delay: { value: 2500, measurement: "ms" },
              color: i(0),
            });
          }),
          s.forEach((e) => {
            e.innerHTML = o({
              position: { value: 1, measurement: "rem" },
              positionTwo: { value: 1, measurement: "rem" },
              speed: { value: 10, measurement: "s" },
              color: i(0),
            });
          });
      },
    };
  n(e.desktopToLargeDeskTop, u, u);
}
function homeAnimation() {
  let { HTML_POSITION: e, ATTR: t } = constants(),
    {
      downArrow: n,
      upArrow: a,
      leftArrow: o,
      rightArrow: r,
      getRandomY: i,
      getRandomX: s,
    } = ShootingStarAnimation(),
    m = document.querySelector(`[${t.dataHomeAnimation}]`);
  if (null != m) {
    let l = [
      o({
        position: { value: i(), measurement: "px" },
        positionTwo: { value: i(), measurement: "px" },
      }),
      o({
        position: { value: i(), measurement: "px" },
        positionTwo: { value: i(), measurement: "px" },
      }),
      r({
        position: { value: i(), measurement: "px" },
        positionTwo: { value: i(), measurement: "px" },
      }),
      r({
        position: { value: i(), measurement: "px" },
        positionTwo: { value: i(), measurement: "px" },
      }),
      n({
        position: { value: s(), measurement: "px" },
        positionTwo: { value: s(), measurement: "px" },
      }),
      n({
        position: { value: s(), measurement: "px" },
        positionTwo: { value: s(), measurement: "px" },
      }),
      a({
        position: { value: s(), measurement: "px" },
        positionTwo: { value: s(), measurement: "px" },
      }),
      a({
        position: { value: s(), measurement: "px" },
        positionTwo: { value: s(), measurement: "px" },
      }),
    ];
    l.forEach((t) => {
      m.insertAdjacentHTML(e.afterBegin, t);
    });
  }
}
function submitBtnAnimation() {
  let { ID: e } = constants(),
    { appendBoxArrow: t } = ShootingStarAnimation(),
    n = document.getElementById(e.submit);
  t(n);
}
function titleAnimation() {
  let { ATTR: e } = constants(),
    { appendArrow: t } = ShootingStarAnimation(),
    n = Array.from(document.querySelectorAll(`[${e.dataArrow}]`));
  n.forEach((e) => t(e));
}
navigation(),
  homeAnimation(),
  sectionAnimation(),
  submitBtnAnimation(),
  titleAnimation();
